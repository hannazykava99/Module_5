<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.1 (Python 3.9.2 on linux)" generated="20221213 13:00:16.584" rpa="false" schemaversion="3">
<suite id="s1" name="Robot Homework" source="/var/jenkins_home/workspace/MyProject/robot_homework.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymssql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20221213 13:00:16.686" level="INFO">Connecting using : pymssql.connect(database=TRN, user=TestLogin, password=1234, host=192.168.1.6, port=1433) </msg>
<status status="PASS" starttime="20221213 13:00:16.661" endtime="20221213 13:00:16.806"/>
</kw>
<test id="s1-t1" name="Prerequisite №1. Check that 3 tables (jobs, locations, employees) exist" line="18">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>jobs</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.808" level="INFO">Executing : Table Must Exist  |  jobs </msg>
<msg timestamp="20221213 13:00:16.808" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='jobs' </msg>
<status status="PASS" starttime="20221213 13:00:16.807" endtime="20221213 13:00:16.835"/>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>locations</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.836" level="INFO">Executing : Table Must Exist  |  locations </msg>
<msg timestamp="20221213 13:00:16.836" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='locations' </msg>
<status status="PASS" starttime="20221213 13:00:16.836" endtime="20221213 13:00:16.853"/>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>employees</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.853" level="INFO">Executing : Table Must Exist  |  employees </msg>
<msg timestamp="20221213 13:00:16.854" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='employees' </msg>
<status status="PASS" starttime="20221213 13:00:16.853" endtime="20221213 13:00:16.873"/>
</kw>
<status status="PASS" starttime="20221213 13:00:16.806" endtime="20221213 13:00:16.873"/>
</test>
<test id="s1-t2" name="Prerequisite №2. Check that 3 tables (jobs, locations, employees) are not empty" line="24">
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<arg>select * from hr.jobs</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.876" level="INFO">Executing : Row Count Is Greater Than X  |  select * from hr.jobs  |  0 </msg>
<msg timestamp="20221213 13:00:16.876" level="INFO">Executing : Row Count  |  select * from hr.jobs </msg>
<status status="PASS" starttime="20221213 13:00:16.875" endtime="20221213 13:00:16.886"/>
</kw>
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<arg>select * from hr.locations</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.886" level="INFO">Executing : Row Count Is Greater Than X  |  select * from hr.locations  |  0 </msg>
<msg timestamp="20221213 13:00:16.886" level="INFO">Executing : Row Count  |  select * from hr.locations </msg>
<status status="PASS" starttime="20221213 13:00:16.886" endtime="20221213 13:00:16.894"/>
</kw>
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<arg>select * from hr.employees</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.895" level="INFO">Executing : Row Count Is Greater Than X  |  select * from hr.employees  |  0 </msg>
<msg timestamp="20221213 13:00:16.895" level="INFO">Executing : Row Count  |  select * from hr.employees </msg>
<status status="PASS" starttime="20221213 13:00:16.895" endtime="20221213 13:00:16.906"/>
</kw>
<status status="PASS" starttime="20221213 13:00:16.874" endtime="20221213 13:00:16.906"/>
</test>
<test id="s1-t3" name="TC №1. Check that table &quot;Jobs&quot; has 4 columns" line="30">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select distinct column_name from INFORMATION_SCHEMA.COLUMNS where table_name = 'Jobs'</arg>
<arg>4</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.908" level="INFO">Executing : Row Count Is Equal To X  |  select distinct column_name from INFORMATION_SCHEMA.COLUMNS where table_name = 'Jobs'  |  4 </msg>
<msg timestamp="20221213 13:00:16.908" level="INFO">Executing : Row Count  |  select distinct column_name from INFORMATION_SCHEMA.COLUMNS where table_name = 'Jobs' </msg>
<status status="PASS" starttime="20221213 13:00:16.908" endtime="20221213 13:00:16.953"/>
</kw>
<status status="PASS" starttime="20221213 13:00:16.907" endtime="20221213 13:00:16.953"/>
</test>
<test id="s1-t4" name="TC №2. Check that table &quot;Jobs&quot; has record where job_title is 'Programmer'" line="34">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>select job_title from hr.jobs where job_title = 'Programmer'</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.955" level="INFO">Executing : Check If Exists In Database  |  select job_title from hr.jobs where job_title = 'Programmer' </msg>
<msg timestamp="20221213 13:00:16.955" level="INFO">Executing : Query  |  select job_title from hr.jobs where job_title = 'Programmer' </msg>
<status status="PASS" starttime="20221213 13:00:16.955" endtime="20221213 13:00:16.963"/>
</kw>
<status status="PASS" starttime="20221213 13:00:16.953" endtime="20221213 13:00:16.963"/>
</test>
<test id="s1-t5" name="TC №3. Check that table &quot;Locations&quot; has column 'postal_code'" line="38">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>select column_name from INFORMATION_SCHEMA.COLUMNS where table_name = 'Locations' and Column_name = 'postal_code'</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.965" level="INFO">Executing : Check If Exists In Database  |  select column_name from INFORMATION_SCHEMA.COLUMNS where table_name = 'Locations' and Column_name = 'postal_code' </msg>
<msg timestamp="20221213 13:00:16.965" level="INFO">Executing : Query  |  select column_name from INFORMATION_SCHEMA.COLUMNS where table_name = 'Locations' and Column_name = 'postal_code' </msg>
<status status="PASS" starttime="20221213 13:00:16.965" endtime="20221213 13:00:16.996"/>
</kw>
<status status="PASS" starttime="20221213 13:00:16.964" endtime="20221213 13:00:16.996"/>
</test>
<test id="s1-t6" name="TC №4. Check that table &quot;Locations&quot; doesn't contain duplicates by field &quot;street_address&quot;" line="42">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select street_address, count(*) from hr.locations group by street_address having count(*) &gt; 1</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:16.998" level="INFO">Executing : Row Count Is Equal To X  |  select street_address, count(*) from hr.locations group by street_address having count(*) &gt; 1  |  0 </msg>
<msg timestamp="20221213 13:00:16.998" level="INFO">Executing : Row Count  |  select street_address, count(*) from hr.locations group by street_address having count(*) &gt; 1 </msg>
<status status="PASS" starttime="20221213 13:00:16.998" endtime="20221213 13:00:17.008"/>
</kw>
<status status="PASS" starttime="20221213 13:00:16.997" endtime="20221213 13:00:17.008"/>
</test>
<test id="s1-t7" name="TC №5. Calculate max, min and avg of salary from &quot;Employees&quot; table" line="46">
<kw name="Query" library="DatabaseLibrary">
<var>${queryResults}</var>
<arg>select round(max(salary),2), round(min(salary),2), round(avg(salary),2) from hr.employees</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20221213 13:00:17.010" level="INFO">Executing : Query  |  select round(max(salary),2), round(min(salary),2), round(avg(salary),2) from hr.employees </msg>
<msg timestamp="20221213 13:00:17.019" level="INFO">${queryResults} = [(Decimal('24000.00'), Decimal('0.00'), Decimal('7885.000000'))]</msg>
<status status="PASS" starttime="20221213 13:00:17.010" endtime="20221213 13:00:17.019"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Max salary is ${queryResults[0][0]}, mix salary is ${queryResults[0][1]} and avarage salary is ${queryResults[0][2]} among employees</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221213 13:00:17.022" level="INFO">Max salary is 24000.00, mix salary is 0.00 and avarage salary is 7885.000000 among employees</msg>
<status status="PASS" starttime="20221213 13:00:17.019" endtime="20221213 13:00:17.022"/>
</kw>
<status status="PASS" starttime="20221213 13:00:17.009" endtime="20221213 13:00:17.023"/>
</test>
<test id="s1-t8" name="TC №6. Check that column &quot;Email&quot; doesn't contain NULLs in &quot;Employees&quot; table" line="51">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select * from hr.employees where email is null</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:17.025" level="INFO">Executing : Row Count Is Equal To X  |  select * from hr.employees where email is null  |  0 </msg>
<msg timestamp="20221213 13:00:17.025" level="INFO">Executing : Row Count  |  select * from hr.employees where email is null </msg>
<status status="PASS" starttime="20221213 13:00:17.024" endtime="20221213 13:00:17.031"/>
</kw>
<status status="PASS" starttime="20221213 13:00:17.023" endtime="20221213 13:00:17.032"/>
</test>
<test id="s1-t9" name="TC №7. Check that column &quot;last_name&quot; doesn't contain NULLs in &quot;Employees&quot; table" line="55">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select * from hr.employees where last_name is null</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:17.033" level="INFO">Executing : Row Count Is Equal To X  |  select * from hr.employees where last_name is null  |  0 </msg>
<msg timestamp="20221213 13:00:17.033" level="INFO">Executing : Row Count  |  select * from hr.employees where last_name is null </msg>
<status status="PASS" starttime="20221213 13:00:17.033" endtime="20221213 13:00:17.040"/>
</kw>
<status status="PASS" starttime="20221213 13:00:17.032" endtime="20221213 13:00:17.040"/>
</test>
<test id="s1-t10" name="TC №8. Check that column &quot;first_name&quot; doesn't contain NULLs in &quot;Employees&quot; table" line="59">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select * from hr.employees where first_name is null</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20221213 13:00:17.042" level="INFO">Executing : Row Count Is Equal To X  |  select * from hr.employees where first_name is null  |  0 </msg>
<msg timestamp="20221213 13:00:17.042" level="INFO">Executing : Row Count  |  select * from hr.employees where first_name is null </msg>
<status status="PASS" starttime="20221213 13:00:17.042" endtime="20221213 13:00:17.052"/>
</kw>
<status status="PASS" starttime="20221213 13:00:17.041" endtime="20221213 13:00:17.053"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20221213 13:00:17.054" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20221213 13:00:17.054" endtime="20221213 13:00:17.055"/>
</kw>
<status status="PASS" starttime="20221213 13:00:16.586" endtime="20221213 13:00:17.055"/>
</suite>
<statistics>
<total>
<stat pass="10" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="10" fail="0" skip="0" id="s1" name="Robot Homework">Robot Homework</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
